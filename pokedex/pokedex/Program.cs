using System.Globalization;
using System.Net.Http.Headers;
using CsvHelper;
using CsvHelper.Configuration;
using Newtonsoft.Json;
using System.Net.Http;
using pokedex;

using HttpClient client = new();

client.DefaultRequestHeaders.Accept.Clear();
client.DefaultRequestHeaders.Accept.Add(
    new MediaTypeWithQualityHeaderValue("applications/json"));
client.DefaultRequestHeaders.Add("User-Agent", ".NET Foundation Repository Reporter");

await ProcessRepositoriesAsync(client);

static async Task ProcessRepositoriesAsync(HttpClient client)

{
    var json = await client.GetStringAsync(
    "https://pokeapi.co/api/v2/pokedex/2"); //list all the pokedex entries of 1st gen Pokemon 1-152
                                            // var records = JsonSerializer.Deserialize<dynamic>(json);
    System.IO.File.WriteAllText(@"pokemon.json", json);
    string json_file = File.ReadAllText("pokemon.json");
    Pokemon data = JsonConvert.DeserializeObject<Pokemon>(json);

    using (var writer = new StreamWriter("D:\\Git\\Projects\\pokedex2.0\\pokedex.csv"))
    using (var csv = new CsvWriter(writer, new CsvConfiguration(CultureInfo.InvariantCulture)))
    {
        csv.WriteField("entry_number");
        csv.WriteField("pokemon_species_name");
        csv.NextRecord();

        foreach (var item in data.PokemonEntries)
        {
            csv.WriteField(item.EntryNumber);
            csv.WriteField(item.PokemonSpecies.Name);
            csv.NextRecord();
        }
    }

}



// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using pokedex;
//
//    var pokemon = Pokemon.FromJson(jsonString);

namespace pokedex
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Pokemon
    {
        [JsonProperty("descriptions")]
        public Description[] Descriptions { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("is_main_series")]
        public bool IsMainSeries { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("names")]
        public Name[] Names { get; set; }

        [JsonProperty("pokemon_entries")]
        public PokemonEntry[] PokemonEntries { get; set; }

        [JsonProperty("region")]
        public Region Region { get; set; }

        [JsonProperty("version_groups")]
        public Region[] VersionGroups { get; set; }
    }

    public partial class Description
    {
        [JsonProperty("description")]
        public string DescriptionDescription { get; set; }

        [JsonProperty("language")]
        public Region Language { get; set; }
    }

    public partial class Region
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class Name
    {
        [JsonProperty("language")]
        public Region Language { get; set; }

        [JsonProperty("name")]
        public string NameName { get; set; }
    }

    public partial class PokemonEntry
    {
        [JsonProperty("entry_number")]
        public long EntryNumber { get; set; }

        [JsonProperty("pokemon_species")]
        public Region PokemonSpecies { get; set; }
    }

    public partial class Pokemon
    {
        public static Pokemon FromJson(string json) => JsonConvert.DeserializeObject<Pokemon>(json, pokedex.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Pokemon self) => JsonConvert.SerializeObject(self, pokedex.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}




